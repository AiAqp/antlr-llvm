# Generated from Language.g4 by ANTLR 4.9.3
from antlr4 import *
from io import StringIO
import sys
if sys.version_info[1] > 5:
    from typing import TextIO
else:
    from typing.io import TextIO



def serializedATN():
    with StringIO() as buf:
        buf.write("\3\u608b\ua72a\u8133\ub9ed\u417c\u3be7\u7786\u5964\2\62")
        buf.write("\u0158\b\1\4\2\t\2\4\3\t\3\4\4\t\4\4\5\t\5\4\6\t\6\4\7")
        buf.write("\t\7\4\b\t\b\4\t\t\t\4\n\t\n\4\13\t\13\4\f\t\f\4\r\t\r")
        buf.write("\4\16\t\16\4\17\t\17\4\20\t\20\4\21\t\21\4\22\t\22\4\23")
        buf.write("\t\23\4\24\t\24\4\25\t\25\4\26\t\26\4\27\t\27\4\30\t\30")
        buf.write("\4\31\t\31\4\32\t\32\4\33\t\33\4\34\t\34\4\35\t\35\4\36")
        buf.write("\t\36\4\37\t\37\4 \t \4!\t!\4\"\t\"\4#\t#\4$\t$\4%\t%")
        buf.write("\4&\t&\4\'\t\'\4(\t(\4)\t)\4*\t*\4+\t+\4,\t,\4-\t-\4.")
        buf.write("\t.\4/\t/\4\60\t\60\4\61\t\61\3\2\3\2\3\2\3\2\3\2\3\2")
        buf.write("\3\2\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3\4\3\4\3\4\3")
        buf.write("\4\3\5\3\5\3\5\3\5\3\5\3\5\3\6\3\6\3\6\3\7\3\7\3\7\3\7")
        buf.write("\3\7\3\7\3\b\3\b\3\b\3\b\3\b\3\t\3\t\3\t\3\t\3\t\3\n\3")
        buf.write("\n\3\n\3\n\3\n\3\13\3\13\3\13\3\13\3\f\3\f\3\f\3\r\3\r")
        buf.write("\3\r\3\r\3\r\5\r\u00a2\n\r\3\16\3\16\7\16\u00a6\n\16\f")
        buf.write("\16\16\16\u00a9\13\16\3\16\3\16\3\17\3\17\3\17\3\17\3")
        buf.write("\17\3\17\3\17\3\17\3\17\3\17\3\17\5\17\u00b8\n\17\3\20")
        buf.write("\3\20\3\20\3\20\3\20\3\20\3\20\3\20\3\20\3\20\3\20\3\20")
        buf.write("\3\20\3\20\3\20\3\20\3\20\3\20\3\20\3\20\3\20\3\20\3\20")
        buf.write("\3\20\3\20\3\20\3\20\3\20\3\20\3\20\3\20\5\20\u00d9\n")
        buf.write("\20\3\21\3\21\3\21\3\21\3\21\3\21\3\21\3\21\3\21\5\21")
        buf.write("\u00e4\n\21\3\22\5\22\u00e7\n\22\3\22\3\22\3\22\3\23\6")
        buf.write("\23\u00ed\n\23\r\23\16\23\u00ee\3\24\3\24\3\25\3\25\3")
        buf.write("\26\3\26\3\27\3\27\3\30\3\30\3\31\3\31\3\32\3\32\3\33")
        buf.write("\3\33\3\34\3\34\3\35\3\35\3\36\3\36\3\37\3\37\3\37\3 ")
        buf.write("\3 \3 \3 \5 \u010e\n \3!\3!\3\"\3\"\3\"\3\"\5\"\u0116")
        buf.write("\n\"\3#\3#\3$\3$\3$\3$\5$\u011e\n$\3%\3%\3%\3&\3&\3&\3")
        buf.write("\'\3\'\3(\3(\3)\3)\3*\3*\3+\3+\3,\3,\3-\3-\3.\6.\u0135")
        buf.write("\n.\r.\16.\u0136\3/\3/\3/\3/\7/\u013d\n/\f/\16/\u0140")
        buf.write("\13/\3/\3/\3/\3/\3/\3\60\3\60\3\60\3\60\7\60\u014b\n\60")
        buf.write("\f\60\16\60\u014e\13\60\3\60\3\60\3\61\6\61\u0153\n\61")
        buf.write("\r\61\16\61\u0154\3\61\3\61\4\u00a7\u013e\2\62\3\3\5\4")
        buf.write("\7\5\t\6\13\7\r\b\17\t\21\n\23\13\25\f\27\r\31\16\33\17")
        buf.write("\35\20\37\21!\22#\23%\24\'\25)\26+\27-\30/\31\61\32\63")
        buf.write("\33\65\34\67\359\36;\37= ?!A\"C#E$G%I&K\'M(O)Q*S+U,W-")
        buf.write("Y.[/]\60_\61a\62\3\2\6\3\2\62;\6\2\62;C\\aac|\4\2\f\f")
        buf.write("\17\17\5\2\13\f\17\17\"\"\2\u016d\2\3\3\2\2\2\2\5\3\2")
        buf.write("\2\2\2\7\3\2\2\2\2\t\3\2\2\2\2\13\3\2\2\2\2\r\3\2\2\2")
        buf.write("\2\17\3\2\2\2\2\21\3\2\2\2\2\23\3\2\2\2\2\25\3\2\2\2\2")
        buf.write("\27\3\2\2\2\2\31\3\2\2\2\2\33\3\2\2\2\2\35\3\2\2\2\2\37")
        buf.write("\3\2\2\2\2!\3\2\2\2\2#\3\2\2\2\2%\3\2\2\2\2\'\3\2\2\2")
        buf.write("\2)\3\2\2\2\2+\3\2\2\2\2-\3\2\2\2\2/\3\2\2\2\2\61\3\2")
        buf.write("\2\2\2\63\3\2\2\2\2\65\3\2\2\2\2\67\3\2\2\2\29\3\2\2\2")
        buf.write("\2;\3\2\2\2\2=\3\2\2\2\2?\3\2\2\2\2A\3\2\2\2\2C\3\2\2")
        buf.write("\2\2E\3\2\2\2\2G\3\2\2\2\2I\3\2\2\2\2K\3\2\2\2\2M\3\2")
        buf.write("\2\2\2O\3\2\2\2\2Q\3\2\2\2\2S\3\2\2\2\2U\3\2\2\2\2W\3")
        buf.write("\2\2\2\2Y\3\2\2\2\2[\3\2\2\2\2]\3\2\2\2\2_\3\2\2\2\2a")
        buf.write("\3\2\2\2\3c\3\2\2\2\5j\3\2\2\2\7s\3\2\2\2\tw\3\2\2\2\13")
        buf.write("}\3\2\2\2\r\u0080\3\2\2\2\17\u0086\3\2\2\2\21\u008b\3")
        buf.write("\2\2\2\23\u0090\3\2\2\2\25\u0095\3\2\2\2\27\u0099\3\2")
        buf.write("\2\2\31\u00a1\3\2\2\2\33\u00a3\3\2\2\2\35\u00b7\3\2\2")
        buf.write("\2\37\u00d8\3\2\2\2!\u00e3\3\2\2\2#\u00e6\3\2\2\2%\u00ec")
        buf.write("\3\2\2\2\'\u00f0\3\2\2\2)\u00f2\3\2\2\2+\u00f4\3\2\2\2")
        buf.write("-\u00f6\3\2\2\2/\u00f8\3\2\2\2\61\u00fa\3\2\2\2\63\u00fc")
        buf.write("\3\2\2\2\65\u00fe\3\2\2\2\67\u0100\3\2\2\29\u0102\3\2")
        buf.write("\2\2;\u0104\3\2\2\2=\u0106\3\2\2\2?\u010d\3\2\2\2A\u010f")
        buf.write("\3\2\2\2C\u0115\3\2\2\2E\u0117\3\2\2\2G\u011d\3\2\2\2")
        buf.write("I\u011f\3\2\2\2K\u0122\3\2\2\2M\u0125\3\2\2\2O\u0127\3")
        buf.write("\2\2\2Q\u0129\3\2\2\2S\u012b\3\2\2\2U\u012d\3\2\2\2W\u012f")
        buf.write("\3\2\2\2Y\u0131\3\2\2\2[\u0134\3\2\2\2]\u0138\3\2\2\2")
        buf.write("_\u0146\3\2\2\2a\u0152\3\2\2\2cd\7t\2\2de\7g\2\2ef\7v")
        buf.write("\2\2fg\7w\2\2gh\7t\2\2hi\7p\2\2i\4\3\2\2\2jk\7h\2\2kl")
        buf.write("\7w\2\2lm\7p\2\2mn\7e\2\2no\7v\2\2op\7k\2\2pq\7q\2\2q")
        buf.write("r\7p\2\2r\6\3\2\2\2st\7g\2\2tu\7p\2\2uv\7f\2\2v\b\3\2")
        buf.write("\2\2wx\7e\2\2xy\7n\2\2yz\7c\2\2z{\7u\2\2{|\7u\2\2|\n\3")
        buf.write("\2\2\2}~\7k\2\2~\177\7h\2\2\177\f\3\2\2\2\u0080\u0081")
        buf.write("\7\"\2\2\u0081\u0082\7v\2\2\u0082\u0083\7j\2\2\u0083\u0084")
        buf.write("\7g\2\2\u0084\u0085\7p\2\2\u0085\16\3\2\2\2\u0086\u0087")
        buf.write("\7g\2\2\u0087\u0088\7n\2\2\u0088\u0089\7k\2\2\u0089\u008a")
        buf.write("\7h\2\2\u008a\20\3\2\2\2\u008b\u008c\7v\2\2\u008c\u008d")
        buf.write("\7j\2\2\u008d\u008e\7g\2\2\u008e\u008f\7p\2\2\u008f\22")
        buf.write("\3\2\2\2\u0090\u0091\7g\2\2\u0091\u0092\7n\2\2\u0092\u0093")
        buf.write("\7u\2\2\u0093\u0094\7g\2\2\u0094\24\3\2\2\2\u0095\u0096")
        buf.write("\7h\2\2\u0096\u0097\7q\2\2\u0097\u0098\7t\2\2\u0098\26")
        buf.write("\3\2\2\2\u0099\u009a\7i\2\2\u009a\u009b\7q\2\2\u009b\30")
        buf.write("\3\2\2\2\u009c\u00a2\5\'\24\2\u009d\u00a2\5)\25\2\u009e")
        buf.write("\u00a2\5+\26\2\u009f\u00a2\5-\27\2\u00a0\u00a2\5/\30\2")
        buf.write("\u00a1\u009c\3\2\2\2\u00a1\u009d\3\2\2\2\u00a1\u009e\3")
        buf.write("\2\2\2\u00a1\u009f\3\2\2\2\u00a1\u00a0\3\2\2\2\u00a2\32")
        buf.write("\3\2\2\2\u00a3\u00a7\5Y-\2\u00a4\u00a6\13\2\2\2\u00a5")
        buf.write("\u00a4\3\2\2\2\u00a6\u00a9\3\2\2\2\u00a7\u00a8\3\2\2\2")
        buf.write("\u00a7\u00a5\3\2\2\2\u00a8\u00aa\3\2\2\2\u00a9\u00a7\3")
        buf.write("\2\2\2\u00aa\u00ab\5Y-\2\u00ab\34\3\2\2\2\u00ac\u00ad")
        buf.write("\7i\2\2\u00ad\u00ae\7n\2\2\u00ae\u00af\7q\2\2\u00af\u00b0")
        buf.write("\7d\2\2\u00b0\u00b1\7c\2\2\u00b1\u00b8\7n\2\2\u00b2\u00b3")
        buf.write("\7n\2\2\u00b3\u00b4\7q\2\2\u00b4\u00b5\7e\2\2\u00b5\u00b6")
        buf.write("\7c\2\2\u00b6\u00b8\7n\2\2\u00b7\u00ac\3\2\2\2\u00b7\u00b2")
        buf.write("\3\2\2\2\u00b8\36\3\2\2\2\u00b9\u00ba\7d\2\2\u00ba\u00bb")
        buf.write("\7q\2\2\u00bb\u00bc\7q\2\2\u00bc\u00d9\7n\2\2\u00bd\u00be")
        buf.write("\7k\2\2\u00be\u00bf\7p\2\2\u00bf\u00d9\7v\2\2\u00c0\u00c1")
        buf.write("\7u\2\2\u00c1\u00c2\7v\2\2\u00c2\u00d9\7t\2\2\u00c3\u00c4")
        buf.write("\7c\2\2\u00c4\u00c5\7t\2\2\u00c5\u00c6\7t\2\2\u00c6\u00c7")
        buf.write("\7c\2\2\u00c7\u00d9\7{\2\2\u00c8\u00c9\7u\2\2\u00c9\u00ca")
        buf.write("\7v\2\2\u00ca\u00cb\7t\2\2\u00cb\u00cc\7w\2\2\u00cc\u00cd")
        buf.write("\7e\2\2\u00cd\u00d9\7v\2\2\u00ce\u00cf\7f\2\2\u00cf\u00d0")
        buf.write("\7q\2\2\u00d0\u00d1\7w\2\2\u00d1\u00d2\7d\2\2\u00d2\u00d3")
        buf.write("\7n\2\2\u00d3\u00d9\7g\2\2\u00d4\u00d5\7x\2\2\u00d5\u00d6")
        buf.write("\7q\2\2\u00d6\u00d7\7k\2\2\u00d7\u00d9\7f\2\2\u00d8\u00b9")
        buf.write("\3\2\2\2\u00d8\u00bd\3\2\2\2\u00d8\u00c0\3\2\2\2\u00d8")
        buf.write("\u00c3\3\2\2\2\u00d8\u00c8\3\2\2\2\u00d8\u00ce\3\2\2\2")
        buf.write("\u00d8\u00d4\3\2\2\2\u00d9 \3\2\2\2\u00da\u00db\7v\2\2")
        buf.write("\u00db\u00dc\7t\2\2\u00dc\u00dd\7w\2\2\u00dd\u00e4\7g")
        buf.write("\2\2\u00de\u00df\7h\2\2\u00df\u00e0\7c\2\2\u00e0\u00e1")
        buf.write("\7n\2\2\u00e1\u00e2\7u\2\2\u00e2\u00e4\7g\2\2\u00e3\u00da")
        buf.write("\3\2\2\2\u00e3\u00de\3\2\2\2\u00e4\"\3\2\2\2\u00e5\u00e7")
        buf.write("\5%\23\2\u00e6\u00e5\3\2\2\2\u00e6\u00e7\3\2\2\2\u00e7")
        buf.write("\u00e8\3\2\2\2\u00e8\u00e9\5Q)\2\u00e9\u00ea\5%\23\2\u00ea")
        buf.write("$\3\2\2\2\u00eb\u00ed\t\2\2\2\u00ec\u00eb\3\2\2\2\u00ed")
        buf.write("\u00ee\3\2\2\2\u00ee\u00ec\3\2\2\2\u00ee\u00ef\3\2\2\2")
        buf.write("\u00ef&\3\2\2\2\u00f0\u00f1\7-\2\2\u00f1(\3\2\2\2\u00f2")
        buf.write("\u00f3\7/\2\2\u00f3*\3\2\2\2\u00f4\u00f5\7,\2\2\u00f5")
        buf.write(",\3\2\2\2\u00f6\u00f7\7\61\2\2\u00f7.\3\2\2\2\u00f8\u00f9")
        buf.write("\7`\2\2\u00f9\60\3\2\2\2\u00fa\u00fb\7*\2\2\u00fb\62\3")
        buf.write("\2\2\2\u00fc\u00fd\7+\2\2\u00fd\64\3\2\2\2\u00fe\u00ff")
        buf.write("\7]\2\2\u00ff\66\3\2\2\2\u0100\u0101\7_\2\2\u01018\3\2")
        buf.write("\2\2\u0102\u0103\7}\2\2\u0103:\3\2\2\2\u0104\u0105\7\177")
        buf.write("\2\2\u0105<\3\2\2\2\u0106\u0107\7?\2\2\u0107\u0108\7?")
        buf.write("\2\2\u0108>\3\2\2\2\u0109\u010a\7#\2\2\u010a\u010e\7?")
        buf.write("\2\2\u010b\u010c\7?\2\2\u010c\u010e\7#\2\2\u010d\u0109")
        buf.write("\3\2\2\2\u010d\u010b\3\2\2\2\u010e@\3\2\2\2\u010f\u0110")
        buf.write("\7@\2\2\u0110B\3\2\2\2\u0111\u0112\7@\2\2\u0112\u0116")
        buf.write("\7?\2\2\u0113\u0114\7?\2\2\u0114\u0116\7@\2\2\u0115\u0111")
        buf.write("\3\2\2\2\u0115\u0113\3\2\2\2\u0116D\3\2\2\2\u0117\u0118")
        buf.write("\7>\2\2\u0118F\3\2\2\2\u0119\u011a\7>\2\2\u011a\u011e")
        buf.write("\7?\2\2\u011b\u011c\7?\2\2\u011c\u011e\7>\2\2\u011d\u0119")
        buf.write("\3\2\2\2\u011d\u011b\3\2\2\2\u011eH\3\2\2\2\u011f\u0120")
        buf.write("\7(\2\2\u0120\u0121\7(\2\2\u0121J\3\2\2\2\u0122\u0123")
        buf.write("\7~\2\2\u0123\u0124\7~\2\2\u0124L\3\2\2\2\u0125\u0126")
        buf.write("\7#\2\2\u0126N\3\2\2\2\u0127\u0128\7?\2\2\u0128P\3\2\2")
        buf.write("\2\u0129\u012a\7\60\2\2\u012aR\3\2\2\2\u012b\u012c\7<")
        buf.write("\2\2\u012cT\3\2\2\2\u012d\u012e\7.\2\2\u012eV\3\2\2\2")
        buf.write("\u012f\u0130\7=\2\2\u0130X\3\2\2\2\u0131\u0132\7)\2\2")
        buf.write("\u0132Z\3\2\2\2\u0133\u0135\t\3\2\2\u0134\u0133\3\2\2")
        buf.write("\2\u0135\u0136\3\2\2\2\u0136\u0134\3\2\2\2\u0136\u0137")
        buf.write("\3\2\2\2\u0137\\\3\2\2\2\u0138\u0139\7\61\2\2\u0139\u013a")
        buf.write("\7,\2\2\u013a\u013e\3\2\2\2\u013b\u013d\13\2\2\2\u013c")
        buf.write("\u013b\3\2\2\2\u013d\u0140\3\2\2\2\u013e\u013f\3\2\2\2")
        buf.write("\u013e\u013c\3\2\2\2\u013f\u0141\3\2\2\2\u0140\u013e\3")
        buf.write("\2\2\2\u0141\u0142\7,\2\2\u0142\u0143\7\61\2\2\u0143\u0144")
        buf.write("\3\2\2\2\u0144\u0145\b/\2\2\u0145^\3\2\2\2\u0146\u0147")
        buf.write("\7\61\2\2\u0147\u0148\7\61\2\2\u0148\u014c\3\2\2\2\u0149")
        buf.write("\u014b\n\4\2\2\u014a\u0149\3\2\2\2\u014b\u014e\3\2\2\2")
        buf.write("\u014c\u014a\3\2\2\2\u014c\u014d\3\2\2\2\u014d\u014f\3")
        buf.write("\2\2\2\u014e\u014c\3\2\2\2\u014f\u0150\b\60\2\2\u0150")
        buf.write("`\3\2\2\2\u0151\u0153\t\5\2\2\u0152\u0151\3\2\2\2\u0153")
        buf.write("\u0154\3\2\2\2\u0154\u0152\3\2\2\2\u0154\u0155\3\2\2\2")
        buf.write("\u0155\u0156\3\2\2\2\u0156\u0157\b\61\2\2\u0157b\3\2\2")
        buf.write("\2\21\2\u00a1\u00a7\u00b7\u00d8\u00e3\u00e6\u00ee\u010d")
        buf.write("\u0115\u011d\u0136\u013e\u014c\u0154\3\b\2\2")
        return buf.getvalue()


class LanguageLexer(Lexer):

    atn = ATNDeserializer().deserialize(serializedATN())

    decisionsToDFA = [ DFA(ds, i) for i, ds in enumerate(atn.decisionToState) ]

    T__0 = 1
    T__1 = 2
    T__2 = 3
    T__3 = 4
    T__4 = 5
    T__5 = 6
    T__6 = 7
    T__7 = 8
    T__8 = 9
    T__9 = 10
    T__10 = 11
    OP_ARTH = 12
    N_STRING = 13
    SCOPE = 14
    TYP = 15
    BOOL = 16
    DECIMAL = 17
    INT = 18
    PLS = 19
    MNS = 20
    MUL = 21
    DIV = 22
    EXP = 23
    LRB = 24
    RRB = 25
    LSB = 26
    RSB = 27
    LCB = 28
    RCB = 29
    EQ = 30
    NEQ = 31
    GT = 32
    GTE = 33
    LS = 34
    LSE = 35
    AND = 36
    OR = 37
    NOT = 38
    ASN = 39
    DOT = 40
    COL = 41
    COM = 42
    SEM = 43
    APO = 44
    ID = 45
    COMMENT = 46
    LINE_COMMENT = 47
    WS = 48

    channelNames = [ u"DEFAULT_TOKEN_CHANNEL", u"HIDDEN" ]

    modeNames = [ "DEFAULT_MODE" ]

    literalNames = [ "<INVALID>",
            "'return'", "'function'", "'end'", "'class'", "'if'", "' then'", 
            "'elif'", "'then'", "'else'", "'for'", "'go'", "'+'", "'-'", 
            "'*'", "'/'", "'^'", "'('", "')'", "'['", "']'", "'{'", "'}'", 
            "'=='", "'>'", "'<'", "'&&'", "'||'", "'!'", "'='", "'.'", "':'", 
            "','", "';'", "'''" ]

    symbolicNames = [ "<INVALID>",
            "OP_ARTH", "N_STRING", "SCOPE", "TYP", "BOOL", "DECIMAL", "INT", 
            "PLS", "MNS", "MUL", "DIV", "EXP", "LRB", "RRB", "LSB", "RSB", 
            "LCB", "RCB", "EQ", "NEQ", "GT", "GTE", "LS", "LSE", "AND", 
            "OR", "NOT", "ASN", "DOT", "COL", "COM", "SEM", "APO", "ID", 
            "COMMENT", "LINE_COMMENT", "WS" ]

    ruleNames = [ "T__0", "T__1", "T__2", "T__3", "T__4", "T__5", "T__6", 
                  "T__7", "T__8", "T__9", "T__10", "OP_ARTH", "N_STRING", 
                  "SCOPE", "TYP", "BOOL", "DECIMAL", "INT", "PLS", "MNS", 
                  "MUL", "DIV", "EXP", "LRB", "RRB", "LSB", "RSB", "LCB", 
                  "RCB", "EQ", "NEQ", "GT", "GTE", "LS", "LSE", "AND", "OR", 
                  "NOT", "ASN", "DOT", "COL", "COM", "SEM", "APO", "ID", 
                  "COMMENT", "LINE_COMMENT", "WS" ]

    grammarFileName = "Language.g4"

    def __init__(self, input=None, output:TextIO = sys.stdout):
        super().__init__(input, output)
        self.checkVersion("4.9.3")
        self._interp = LexerATNSimulator(self, self.atn, self.decisionsToDFA, PredictionContextCache())
        self._actions = None
        self._predicates = None


