# Generated from Language.g4 by ANTLR 4.9.3
from antlr4 import *
from io import StringIO
import sys
if sys.version_info[1] > 5:
    from typing import TextIO
else:
    from typing.io import TextIO



def serializedATN():
    with StringIO() as buf:
        buf.write("\3\u608b\ua72a\u8133\ub9ed\u417c\u3be7\u7786\u5964\2\63")
        buf.write("\u0161\b\1\4\2\t\2\4\3\t\3\4\4\t\4\4\5\t\5\4\6\t\6\4\7")
        buf.write("\t\7\4\b\t\b\4\t\t\t\4\n\t\n\4\13\t\13\4\f\t\f\4\r\t\r")
        buf.write("\4\16\t\16\4\17\t\17\4\20\t\20\4\21\t\21\4\22\t\22\4\23")
        buf.write("\t\23\4\24\t\24\4\25\t\25\4\26\t\26\4\27\t\27\4\30\t\30")
        buf.write("\4\31\t\31\4\32\t\32\4\33\t\33\4\34\t\34\4\35\t\35\4\36")
        buf.write("\t\36\4\37\t\37\4 \t \4!\t!\4\"\t\"\4#\t#\4$\t$\4%\t%")
        buf.write("\4&\t&\4\'\t\'\4(\t(\4)\t)\4*\t*\4+\t+\4,\t,\4-\t-\4.")
        buf.write("\t.\4/\t/\4\60\t\60\4\61\t\61\4\62\t\62\3\2\3\2\3\2\3")
        buf.write("\2\3\2\3\2\3\2\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3\4")
        buf.write("\3\4\3\4\3\4\3\5\3\5\3\5\3\5\3\5\3\5\3\6\3\6\3\6\3\6\3")
        buf.write("\6\3\6\3\6\3\7\3\7\3\7\3\b\3\b\3\b\3\b\3\b\3\b\3\t\3\t")
        buf.write("\3\t\3\t\3\t\3\n\3\n\3\n\3\n\3\n\3\13\3\13\3\13\3\13\3")
        buf.write("\13\3\f\3\f\3\f\3\f\3\r\3\r\3\r\3\16\3\16\3\16\3\16\3")
        buf.write("\16\5\16\u00ab\n\16\3\17\3\17\7\17\u00af\n\17\f\17\16")
        buf.write("\17\u00b2\13\17\3\17\3\17\3\20\3\20\3\20\3\20\3\20\3\20")
        buf.write("\3\20\3\20\3\20\3\20\3\20\5\20\u00c1\n\20\3\21\3\21\3")
        buf.write("\21\3\21\3\21\3\21\3\21\3\21\3\21\3\21\3\21\3\21\3\21")
        buf.write("\3\21\3\21\3\21\3\21\3\21\3\21\3\21\3\21\3\21\3\21\3\21")
        buf.write("\3\21\3\21\3\21\3\21\3\21\3\21\3\21\5\21\u00e2\n\21\3")
        buf.write("\22\3\22\3\22\3\22\3\22\3\22\3\22\3\22\3\22\5\22\u00ed")
        buf.write("\n\22\3\23\5\23\u00f0\n\23\3\23\3\23\3\23\3\24\6\24\u00f6")
        buf.write("\n\24\r\24\16\24\u00f7\3\25\3\25\3\26\3\26\3\27\3\27\3")
        buf.write("\30\3\30\3\31\3\31\3\32\3\32\3\33\3\33\3\34\3\34\3\35")
        buf.write("\3\35\3\36\3\36\3\37\3\37\3 \3 \3 \3!\3!\3!\3!\5!\u0117")
        buf.write("\n!\3\"\3\"\3#\3#\3#\3#\5#\u011f\n#\3$\3$\3%\3%\3%\3%")
        buf.write("\5%\u0127\n%\3&\3&\3&\3\'\3\'\3\'\3(\3(\3)\3)\3*\3*\3")
        buf.write("+\3+\3,\3,\3-\3-\3.\3.\3/\6/\u013e\n/\r/\16/\u013f\3\60")
        buf.write("\3\60\3\60\3\60\7\60\u0146\n\60\f\60\16\60\u0149\13\60")
        buf.write("\3\60\3\60\3\60\3\60\3\60\3\61\3\61\3\61\3\61\7\61\u0154")
        buf.write("\n\61\f\61\16\61\u0157\13\61\3\61\3\61\3\62\6\62\u015c")
        buf.write("\n\62\r\62\16\62\u015d\3\62\3\62\4\u00b0\u0147\2\63\3")
        buf.write("\3\5\4\7\5\t\6\13\7\r\b\17\t\21\n\23\13\25\f\27\r\31\16")
        buf.write("\33\17\35\20\37\21!\22#\23%\24\'\25)\26+\27-\30/\31\61")
        buf.write("\32\63\33\65\34\67\359\36;\37= ?!A\"C#E$G%I&K\'M(O)Q*")
        buf.write("S+U,W-Y.[/]\60_\61a\62c\63\3\2\6\3\2\62;\6\2\62;C\\aa")
        buf.write("c|\4\2\f\f\17\17\5\2\13\f\17\17\"\"\2\u0176\2\3\3\2\2")
        buf.write("\2\2\5\3\2\2\2\2\7\3\2\2\2\2\t\3\2\2\2\2\13\3\2\2\2\2")
        buf.write("\r\3\2\2\2\2\17\3\2\2\2\2\21\3\2\2\2\2\23\3\2\2\2\2\25")
        buf.write("\3\2\2\2\2\27\3\2\2\2\2\31\3\2\2\2\2\33\3\2\2\2\2\35\3")
        buf.write("\2\2\2\2\37\3\2\2\2\2!\3\2\2\2\2#\3\2\2\2\2%\3\2\2\2\2")
        buf.write("\'\3\2\2\2\2)\3\2\2\2\2+\3\2\2\2\2-\3\2\2\2\2/\3\2\2\2")
        buf.write("\2\61\3\2\2\2\2\63\3\2\2\2\2\65\3\2\2\2\2\67\3\2\2\2\2")
        buf.write("9\3\2\2\2\2;\3\2\2\2\2=\3\2\2\2\2?\3\2\2\2\2A\3\2\2\2")
        buf.write("\2C\3\2\2\2\2E\3\2\2\2\2G\3\2\2\2\2I\3\2\2\2\2K\3\2\2")
        buf.write("\2\2M\3\2\2\2\2O\3\2\2\2\2Q\3\2\2\2\2S\3\2\2\2\2U\3\2")
        buf.write("\2\2\2W\3\2\2\2\2Y\3\2\2\2\2[\3\2\2\2\2]\3\2\2\2\2_\3")
        buf.write("\2\2\2\2a\3\2\2\2\2c\3\2\2\2\3e\3\2\2\2\5l\3\2\2\2\7u")
        buf.write("\3\2\2\2\ty\3\2\2\2\13\177\3\2\2\2\r\u0086\3\2\2\2\17")
        buf.write("\u0089\3\2\2\2\21\u008f\3\2\2\2\23\u0094\3\2\2\2\25\u0099")
        buf.write("\3\2\2\2\27\u009e\3\2\2\2\31\u00a2\3\2\2\2\33\u00aa\3")
        buf.write("\2\2\2\35\u00ac\3\2\2\2\37\u00c0\3\2\2\2!\u00e1\3\2\2")
        buf.write("\2#\u00ec\3\2\2\2%\u00ef\3\2\2\2\'\u00f5\3\2\2\2)\u00f9")
        buf.write("\3\2\2\2+\u00fb\3\2\2\2-\u00fd\3\2\2\2/\u00ff\3\2\2\2")
        buf.write("\61\u0101\3\2\2\2\63\u0103\3\2\2\2\65\u0105\3\2\2\2\67")
        buf.write("\u0107\3\2\2\29\u0109\3\2\2\2;\u010b\3\2\2\2=\u010d\3")
        buf.write("\2\2\2?\u010f\3\2\2\2A\u0116\3\2\2\2C\u0118\3\2\2\2E\u011e")
        buf.write("\3\2\2\2G\u0120\3\2\2\2I\u0126\3\2\2\2K\u0128\3\2\2\2")
        buf.write("M\u012b\3\2\2\2O\u012e\3\2\2\2Q\u0130\3\2\2\2S\u0132\3")
        buf.write("\2\2\2U\u0134\3\2\2\2W\u0136\3\2\2\2Y\u0138\3\2\2\2[\u013a")
        buf.write("\3\2\2\2]\u013d\3\2\2\2_\u0141\3\2\2\2a\u014f\3\2\2\2")
        buf.write("c\u015b\3\2\2\2ef\7t\2\2fg\7g\2\2gh\7v\2\2hi\7w\2\2ij")
        buf.write("\7t\2\2jk\7p\2\2k\4\3\2\2\2lm\7h\2\2mn\7w\2\2no\7p\2\2")
        buf.write("op\7e\2\2pq\7v\2\2qr\7k\2\2rs\7q\2\2st\7p\2\2t\6\3\2\2")
        buf.write("\2uv\7g\2\2vw\7p\2\2wx\7f\2\2x\b\3\2\2\2yz\7e\2\2z{\7")
        buf.write("n\2\2{|\7c\2\2|}\7u\2\2}~\7u\2\2~\n\3\2\2\2\177\u0080")
        buf.write("\7u\2\2\u0080\u0081\7v\2\2\u0081\u0082\7t\2\2\u0082\u0083")
        buf.write("\7w\2\2\u0083\u0084\7e\2\2\u0084\u0085\7v\2\2\u0085\f")
        buf.write("\3\2\2\2\u0086\u0087\7k\2\2\u0087\u0088\7h\2\2\u0088\16")
        buf.write("\3\2\2\2\u0089\u008a\7\"\2\2\u008a\u008b\7v\2\2\u008b")
        buf.write("\u008c\7j\2\2\u008c\u008d\7g\2\2\u008d\u008e\7p\2\2\u008e")
        buf.write("\20\3\2\2\2\u008f\u0090\7g\2\2\u0090\u0091\7n\2\2\u0091")
        buf.write("\u0092\7k\2\2\u0092\u0093\7h\2\2\u0093\22\3\2\2\2\u0094")
        buf.write("\u0095\7v\2\2\u0095\u0096\7j\2\2\u0096\u0097\7g\2\2\u0097")
        buf.write("\u0098\7p\2\2\u0098\24\3\2\2\2\u0099\u009a\7g\2\2\u009a")
        buf.write("\u009b\7n\2\2\u009b\u009c\7u\2\2\u009c\u009d\7g\2\2\u009d")
        buf.write("\26\3\2\2\2\u009e\u009f\7h\2\2\u009f\u00a0\7q\2\2\u00a0")
        buf.write("\u00a1\7t\2\2\u00a1\30\3\2\2\2\u00a2\u00a3\7i\2\2\u00a3")
        buf.write("\u00a4\7q\2\2\u00a4\32\3\2\2\2\u00a5\u00ab\5)\25\2\u00a6")
        buf.write("\u00ab\5+\26\2\u00a7\u00ab\5-\27\2\u00a8\u00ab\5/\30\2")
        buf.write("\u00a9\u00ab\5\61\31\2\u00aa\u00a5\3\2\2\2\u00aa\u00a6")
        buf.write("\3\2\2\2\u00aa\u00a7\3\2\2\2\u00aa\u00a8\3\2\2\2\u00aa")
        buf.write("\u00a9\3\2\2\2\u00ab\34\3\2\2\2\u00ac\u00b0\5[.\2\u00ad")
        buf.write("\u00af\13\2\2\2\u00ae\u00ad\3\2\2\2\u00af\u00b2\3\2\2")
        buf.write("\2\u00b0\u00b1\3\2\2\2\u00b0\u00ae\3\2\2\2\u00b1\u00b3")
        buf.write("\3\2\2\2\u00b2\u00b0\3\2\2\2\u00b3\u00b4\5[.\2\u00b4\36")
        buf.write("\3\2\2\2\u00b5\u00b6\7i\2\2\u00b6\u00b7\7n\2\2\u00b7\u00b8")
        buf.write("\7q\2\2\u00b8\u00b9\7d\2\2\u00b9\u00ba\7c\2\2\u00ba\u00c1")
        buf.write("\7n\2\2\u00bb\u00bc\7n\2\2\u00bc\u00bd\7q\2\2\u00bd\u00be")
        buf.write("\7e\2\2\u00be\u00bf\7c\2\2\u00bf\u00c1\7n\2\2\u00c0\u00b5")
        buf.write("\3\2\2\2\u00c0\u00bb\3\2\2\2\u00c1 \3\2\2\2\u00c2\u00c3")
        buf.write("\7d\2\2\u00c3\u00c4\7q\2\2\u00c4\u00c5\7q\2\2\u00c5\u00e2")
        buf.write("\7n\2\2\u00c6\u00c7\7k\2\2\u00c7\u00c8\7p\2\2\u00c8\u00e2")
        buf.write("\7v\2\2\u00c9\u00ca\7u\2\2\u00ca\u00cb\7v\2\2\u00cb\u00e2")
        buf.write("\7t\2\2\u00cc\u00cd\7c\2\2\u00cd\u00ce\7t\2\2\u00ce\u00cf")
        buf.write("\7t\2\2\u00cf\u00d0\7c\2\2\u00d0\u00e2\7{\2\2\u00d1\u00d2")
        buf.write("\7u\2\2\u00d2\u00d3\7v\2\2\u00d3\u00d4\7t\2\2\u00d4\u00d5")
        buf.write("\7w\2\2\u00d5\u00d6\7e\2\2\u00d6\u00e2\7v\2\2\u00d7\u00d8")
        buf.write("\7f\2\2\u00d8\u00d9\7q\2\2\u00d9\u00da\7w\2\2\u00da\u00db")
        buf.write("\7d\2\2\u00db\u00dc\7n\2\2\u00dc\u00e2\7g\2\2\u00dd\u00de")
        buf.write("\7x\2\2\u00de\u00df\7q\2\2\u00df\u00e0\7k\2\2\u00e0\u00e2")
        buf.write("\7f\2\2\u00e1\u00c2\3\2\2\2\u00e1\u00c6\3\2\2\2\u00e1")
        buf.write("\u00c9\3\2\2\2\u00e1\u00cc\3\2\2\2\u00e1\u00d1\3\2\2\2")
        buf.write("\u00e1\u00d7\3\2\2\2\u00e1\u00dd\3\2\2\2\u00e2\"\3\2\2")
        buf.write("\2\u00e3\u00e4\7v\2\2\u00e4\u00e5\7t\2\2\u00e5\u00e6\7")
        buf.write("w\2\2\u00e6\u00ed\7g\2\2\u00e7\u00e8\7h\2\2\u00e8\u00e9")
        buf.write("\7c\2\2\u00e9\u00ea\7n\2\2\u00ea\u00eb\7u\2\2\u00eb\u00ed")
        buf.write("\7g\2\2\u00ec\u00e3\3\2\2\2\u00ec\u00e7\3\2\2\2\u00ed")
        buf.write("$\3\2\2\2\u00ee\u00f0\5\'\24\2\u00ef\u00ee\3\2\2\2\u00ef")
        buf.write("\u00f0\3\2\2\2\u00f0\u00f1\3\2\2\2\u00f1\u00f2\5S*\2\u00f2")
        buf.write("\u00f3\5\'\24\2\u00f3&\3\2\2\2\u00f4\u00f6\t\2\2\2\u00f5")
        buf.write("\u00f4\3\2\2\2\u00f6\u00f7\3\2\2\2\u00f7\u00f5\3\2\2\2")
        buf.write("\u00f7\u00f8\3\2\2\2\u00f8(\3\2\2\2\u00f9\u00fa\7-\2\2")
        buf.write("\u00fa*\3\2\2\2\u00fb\u00fc\7/\2\2\u00fc,\3\2\2\2\u00fd")
        buf.write("\u00fe\7,\2\2\u00fe.\3\2\2\2\u00ff\u0100\7\61\2\2\u0100")
        buf.write("\60\3\2\2\2\u0101\u0102\7`\2\2\u0102\62\3\2\2\2\u0103")
        buf.write("\u0104\7*\2\2\u0104\64\3\2\2\2\u0105\u0106\7+\2\2\u0106")
        buf.write("\66\3\2\2\2\u0107\u0108\7]\2\2\u01088\3\2\2\2\u0109\u010a")
        buf.write("\7_\2\2\u010a:\3\2\2\2\u010b\u010c\7}\2\2\u010c<\3\2\2")
        buf.write("\2\u010d\u010e\7\177\2\2\u010e>\3\2\2\2\u010f\u0110\7")
        buf.write("?\2\2\u0110\u0111\7?\2\2\u0111@\3\2\2\2\u0112\u0113\7")
        buf.write("#\2\2\u0113\u0117\7?\2\2\u0114\u0115\7?\2\2\u0115\u0117")
        buf.write("\7#\2\2\u0116\u0112\3\2\2\2\u0116\u0114\3\2\2\2\u0117")
        buf.write("B\3\2\2\2\u0118\u0119\7@\2\2\u0119D\3\2\2\2\u011a\u011b")
        buf.write("\7@\2\2\u011b\u011f\7?\2\2\u011c\u011d\7?\2\2\u011d\u011f")
        buf.write("\7@\2\2\u011e\u011a\3\2\2\2\u011e\u011c\3\2\2\2\u011f")
        buf.write("F\3\2\2\2\u0120\u0121\7>\2\2\u0121H\3\2\2\2\u0122\u0123")
        buf.write("\7>\2\2\u0123\u0127\7?\2\2\u0124\u0125\7?\2\2\u0125\u0127")
        buf.write("\7>\2\2\u0126\u0122\3\2\2\2\u0126\u0124\3\2\2\2\u0127")
        buf.write("J\3\2\2\2\u0128\u0129\7(\2\2\u0129\u012a\7(\2\2\u012a")
        buf.write("L\3\2\2\2\u012b\u012c\7~\2\2\u012c\u012d\7~\2\2\u012d")
        buf.write("N\3\2\2\2\u012e\u012f\7#\2\2\u012fP\3\2\2\2\u0130\u0131")
        buf.write("\7?\2\2\u0131R\3\2\2\2\u0132\u0133\7\60\2\2\u0133T\3\2")
        buf.write("\2\2\u0134\u0135\7<\2\2\u0135V\3\2\2\2\u0136\u0137\7.")
        buf.write("\2\2\u0137X\3\2\2\2\u0138\u0139\7=\2\2\u0139Z\3\2\2\2")
        buf.write("\u013a\u013b\7)\2\2\u013b\\\3\2\2\2\u013c\u013e\t\3\2")
        buf.write("\2\u013d\u013c\3\2\2\2\u013e\u013f\3\2\2\2\u013f\u013d")
        buf.write("\3\2\2\2\u013f\u0140\3\2\2\2\u0140^\3\2\2\2\u0141\u0142")
        buf.write("\7\61\2\2\u0142\u0143\7,\2\2\u0143\u0147\3\2\2\2\u0144")
        buf.write("\u0146\13\2\2\2\u0145\u0144\3\2\2\2\u0146\u0149\3\2\2")
        buf.write("\2\u0147\u0148\3\2\2\2\u0147\u0145\3\2\2\2\u0148\u014a")
        buf.write("\3\2\2\2\u0149\u0147\3\2\2\2\u014a\u014b\7,\2\2\u014b")
        buf.write("\u014c\7\61\2\2\u014c\u014d\3\2\2\2\u014d\u014e\b\60\2")
        buf.write("\2\u014e`\3\2\2\2\u014f\u0150\7\61\2\2\u0150\u0151\7\61")
        buf.write("\2\2\u0151\u0155\3\2\2\2\u0152\u0154\n\4\2\2\u0153\u0152")
        buf.write("\3\2\2\2\u0154\u0157\3\2\2\2\u0155\u0153\3\2\2\2\u0155")
        buf.write("\u0156\3\2\2\2\u0156\u0158\3\2\2\2\u0157\u0155\3\2\2\2")
        buf.write("\u0158\u0159\b\61\2\2\u0159b\3\2\2\2\u015a\u015c\t\5\2")
        buf.write("\2\u015b\u015a\3\2\2\2\u015c\u015d\3\2\2\2\u015d\u015b")
        buf.write("\3\2\2\2\u015d\u015e\3\2\2\2\u015e\u015f\3\2\2\2\u015f")
        buf.write("\u0160\b\62\2\2\u0160d\3\2\2\2\21\2\u00aa\u00b0\u00c0")
        buf.write("\u00e1\u00ec\u00ef\u00f7\u0116\u011e\u0126\u013f\u0147")
        buf.write("\u0155\u015d\3\b\2\2")
        return buf.getvalue()


class LanguageLexer(Lexer):

    atn = ATNDeserializer().deserialize(serializedATN())

    decisionsToDFA = [ DFA(ds, i) for i, ds in enumerate(atn.decisionToState) ]

    T__0 = 1
    T__1 = 2
    T__2 = 3
    T__3 = 4
    T__4 = 5
    T__5 = 6
    T__6 = 7
    T__7 = 8
    T__8 = 9
    T__9 = 10
    T__10 = 11
    T__11 = 12
    OP_ARTH = 13
    N_STRING = 14
    SCOPE = 15
    TYP = 16
    BOOL = 17
    DECIMAL = 18
    INT = 19
    PLS = 20
    MNS = 21
    MUL = 22
    DIV = 23
    EXP = 24
    LRB = 25
    RRB = 26
    LSB = 27
    RSB = 28
    LCB = 29
    RCB = 30
    EQ = 31
    NEQ = 32
    GT = 33
    GTE = 34
    LS = 35
    LSE = 36
    AND = 37
    OR = 38
    NOT = 39
    ASN = 40
    DOT = 41
    COL = 42
    COM = 43
    SEM = 44
    APO = 45
    ID = 46
    COMMENT = 47
    LINE_COMMENT = 48
    WS = 49

    channelNames = [ u"DEFAULT_TOKEN_CHANNEL", u"HIDDEN" ]

    modeNames = [ "DEFAULT_MODE" ]

    literalNames = [ "<INVALID>",
            "'return'", "'function'", "'end'", "'class'", "'struct'", "'if'", 
            "' then'", "'elif'", "'then'", "'else'", "'for'", "'go'", "'+'", 
            "'-'", "'*'", "'/'", "'^'", "'('", "')'", "'['", "']'", "'{'", 
            "'}'", "'=='", "'>'", "'<'", "'&&'", "'||'", "'!'", "'='", "'.'", 
            "':'", "','", "';'", "'''" ]

    symbolicNames = [ "<INVALID>",
            "OP_ARTH", "N_STRING", "SCOPE", "TYP", "BOOL", "DECIMAL", "INT", 
            "PLS", "MNS", "MUL", "DIV", "EXP", "LRB", "RRB", "LSB", "RSB", 
            "LCB", "RCB", "EQ", "NEQ", "GT", "GTE", "LS", "LSE", "AND", 
            "OR", "NOT", "ASN", "DOT", "COL", "COM", "SEM", "APO", "ID", 
            "COMMENT", "LINE_COMMENT", "WS" ]

    ruleNames = [ "T__0", "T__1", "T__2", "T__3", "T__4", "T__5", "T__6", 
                  "T__7", "T__8", "T__9", "T__10", "T__11", "OP_ARTH", "N_STRING", 
                  "SCOPE", "TYP", "BOOL", "DECIMAL", "INT", "PLS", "MNS", 
                  "MUL", "DIV", "EXP", "LRB", "RRB", "LSB", "RSB", "LCB", 
                  "RCB", "EQ", "NEQ", "GT", "GTE", "LS", "LSE", "AND", "OR", 
                  "NOT", "ASN", "DOT", "COL", "COM", "SEM", "APO", "ID", 
                  "COMMENT", "LINE_COMMENT", "WS" ]

    grammarFileName = "Language.g4"

    def __init__(self, input=None, output:TextIO = sys.stdout):
        super().__init__(input, output)
        self.checkVersion("4.9.3")
        self._interp = LexerATNSimulator(self, self.atn, self.decisionsToDFA, PredictionContextCache())
        self._actions = None
        self._predicates = None


