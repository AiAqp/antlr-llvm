# Generated from Language.g4 by ANTLR 4.9.3
from antlr4 import *
from io import StringIO
import sys
if sys.version_info[1] > 5:
    from typing import TextIO
else:
    from typing.io import TextIO



def serializedATN():
    with StringIO() as buf:
        buf.write("\3\u608b\ua72a\u8133\ub9ed\u417c\u3be7\u7786\u5964\2\66")
        buf.write("\u0168\b\1\4\2\t\2\4\3\t\3\4\4\t\4\4\5\t\5\4\6\t\6\4\7")
        buf.write("\t\7\4\b\t\b\4\t\t\t\4\n\t\n\4\13\t\13\4\f\t\f\4\r\t\r")
        buf.write("\4\16\t\16\4\17\t\17\4\20\t\20\4\21\t\21\4\22\t\22\4\23")
        buf.write("\t\23\4\24\t\24\4\25\t\25\4\26\t\26\4\27\t\27\4\30\t\30")
        buf.write("\4\31\t\31\4\32\t\32\4\33\t\33\4\34\t\34\4\35\t\35\4\36")
        buf.write("\t\36\4\37\t\37\4 \t \4!\t!\4\"\t\"\4#\t#\4$\t$\4%\t%")
        buf.write("\4&\t&\4\'\t\'\4(\t(\4)\t)\4*\t*\4+\t+\4,\t,\4-\t-\4.")
        buf.write("\t.\4/\t/\4\60\t\60\4\61\t\61\4\62\t\62\4\63\t\63\4\64")
        buf.write("\t\64\4\65\t\65\3\2\3\2\3\2\3\2\3\2\3\2\3\2\3\2\3\2\3")
        buf.write("\3\3\3\3\3\3\3\3\3\3\4\3\4\3\4\3\4\3\4\3\4\3\5\3\5\3\5")
        buf.write("\3\5\3\5\3\6\3\6\3\6\3\6\3\6\3\7\3\7\3\7\3\7\3\b\3\b\3")
        buf.write("\b\3\b\3\b\3\b\3\t\3\t\3\t\3\n\3\n\3\n\3\13\3\13\3\13")
        buf.write("\3\13\3\13\3\f\3\f\3\f\3\f\3\f\3\r\3\r\3\r\3\r\3\r\3\16")
        buf.write("\3\16\3\16\3\16\3\17\3\17\3\17\3\20\3\20\7\20\u00b2\n")
        buf.write("\20\f\20\16\20\u00b5\13\20\3\20\3\20\3\21\3\21\3\21\3")
        buf.write("\21\3\21\3\21\3\21\3\21\3\21\3\21\3\21\5\21\u00c4\n\21")
        buf.write("\3\21\5\21\u00c7\n\21\3\22\3\22\3\22\3\22\3\23\3\23\3")
        buf.write("\23\3\23\3\23\3\23\3\23\3\23\3\23\3\23\3\23\3\23\3\23")
        buf.write("\3\23\3\23\3\23\3\23\3\23\3\23\3\23\3\23\5\23\u00e2\n")
        buf.write("\23\3\24\5\24\u00e5\n\24\3\24\3\24\3\24\3\25\6\25\u00eb")
        buf.write("\n\25\r\25\16\25\u00ec\3\26\6\26\u00f0\n\26\r\26\16\26")
        buf.write("\u00f1\3\27\3\27\3\27\3\27\3\27\3\27\3\27\3\27\3\27\5")
        buf.write("\27\u00fd\n\27\3\30\3\30\3\31\3\31\3\32\3\32\3\33\3\33")
        buf.write("\3\34\3\34\3\35\3\35\3\36\3\36\3\37\3\37\3 \3 \3!\3!\3")
        buf.write("\"\3\"\3#\3#\3#\3$\3$\3$\3$\5$\u011c\n$\3%\3%\3&\3&\3")
        buf.write("&\3&\5&\u0124\n&\3\'\3\'\3(\3(\3(\3(\5(\u012c\n(\3)\3")
        buf.write(")\3)\3*\3*\3*\3+\3+\3,\3,\3-\3-\3.\3.\3/\3/\3\60\3\60")
        buf.write("\3\61\3\61\3\61\3\61\3\61\3\61\3\61\3\62\3\62\3\63\3\63")
        buf.write("\3\63\3\63\7\63\u014d\n\63\f\63\16\63\u0150\13\63\3\63")
        buf.write("\3\63\3\63\3\63\3\63\3\64\3\64\3\64\3\64\7\64\u015b\n")
        buf.write("\64\f\64\16\64\u015e\13\64\3\64\3\64\3\65\6\65\u0163\n")
        buf.write("\65\r\65\16\65\u0164\3\65\3\65\4\u00b3\u014e\2\66\3\3")
        buf.write("\5\4\7\5\t\6\13\7\r\b\17\t\21\n\23\13\25\f\27\r\31\16")
        buf.write("\33\17\35\20\37\21!\22#\23%\24\'\25)\26+\27-\30/\31\61")
        buf.write("\32\63\33\65\34\67\359\36;\37= ?!A\"C#E$G%I&K\'M(O)Q*")
        buf.write("S+U,W-Y.[/]\60_\61a\62c\63e\64g\65i\66\3\2\6\3\2\62;\6")
        buf.write("\2\62;C\\aac|\4\2\f\f\17\17\5\2\13\f\17\17\"\"\2\u0178")
        buf.write("\2\3\3\2\2\2\2\5\3\2\2\2\2\7\3\2\2\2\2\t\3\2\2\2\2\13")
        buf.write("\3\2\2\2\2\r\3\2\2\2\2\17\3\2\2\2\2\21\3\2\2\2\2\23\3")
        buf.write("\2\2\2\2\25\3\2\2\2\2\27\3\2\2\2\2\31\3\2\2\2\2\33\3\2")
        buf.write("\2\2\2\35\3\2\2\2\2\37\3\2\2\2\2!\3\2\2\2\2#\3\2\2\2\2")
        buf.write("%\3\2\2\2\2\'\3\2\2\2\2)\3\2\2\2\2+\3\2\2\2\2-\3\2\2\2")
        buf.write("\2/\3\2\2\2\2\61\3\2\2\2\2\63\3\2\2\2\2\65\3\2\2\2\2\67")
        buf.write("\3\2\2\2\29\3\2\2\2\2;\3\2\2\2\2=\3\2\2\2\2?\3\2\2\2\2")
        buf.write("A\3\2\2\2\2C\3\2\2\2\2E\3\2\2\2\2G\3\2\2\2\2I\3\2\2\2")
        buf.write("\2K\3\2\2\2\2M\3\2\2\2\2O\3\2\2\2\2Q\3\2\2\2\2S\3\2\2")
        buf.write("\2\2U\3\2\2\2\2W\3\2\2\2\2Y\3\2\2\2\2[\3\2\2\2\2]\3\2")
        buf.write("\2\2\2_\3\2\2\2\2a\3\2\2\2\2c\3\2\2\2\2e\3\2\2\2\2g\3")
        buf.write("\2\2\2\2i\3\2\2\2\3k\3\2\2\2\5t\3\2\2\2\7y\3\2\2\2\t\177")
        buf.write("\3\2\2\2\13\u0084\3\2\2\2\r\u0089\3\2\2\2\17\u008d\3\2")
        buf.write("\2\2\21\u0093\3\2\2\2\23\u0096\3\2\2\2\25\u0099\3\2\2")
        buf.write("\2\27\u009e\3\2\2\2\31\u00a3\3\2\2\2\33\u00a8\3\2\2\2")
        buf.write("\35\u00ac\3\2\2\2\37\u00af\3\2\2\2!\u00c6\3\2\2\2#\u00c8")
        buf.write("\3\2\2\2%\u00e1\3\2\2\2\'\u00e4\3\2\2\2)\u00ea\3\2\2\2")
        buf.write("+\u00ef\3\2\2\2-\u00fc\3\2\2\2/\u00fe\3\2\2\2\61\u0100")
        buf.write("\3\2\2\2\63\u0102\3\2\2\2\65\u0104\3\2\2\2\67\u0106\3")
        buf.write("\2\2\29\u0108\3\2\2\2;\u010a\3\2\2\2=\u010c\3\2\2\2?\u010e")
        buf.write("\3\2\2\2A\u0110\3\2\2\2C\u0112\3\2\2\2E\u0114\3\2\2\2")
        buf.write("G\u011b\3\2\2\2I\u011d\3\2\2\2K\u0123\3\2\2\2M\u0125\3")
        buf.write("\2\2\2O\u012b\3\2\2\2Q\u012d\3\2\2\2S\u0130\3\2\2\2U\u0133")
        buf.write("\3\2\2\2W\u0135\3\2\2\2Y\u0137\3\2\2\2[\u0139\3\2\2\2")
        buf.write("]\u013b\3\2\2\2_\u013d\3\2\2\2a\u013f\3\2\2\2c\u0146\3")
        buf.write("\2\2\2e\u0148\3\2\2\2g\u0156\3\2\2\2i\u0162\3\2\2\2kl")
        buf.write("\7h\2\2lm\7w\2\2mn\7p\2\2no\7e\2\2op\7v\2\2pq\7k\2\2q")
        buf.write("r\7q\2\2rs\7p\2\2s\4\3\2\2\2tu\7k\2\2uv\7p\2\2vw\7k\2")
        buf.write("\2wx\7v\2\2x\6\3\2\2\2yz\7r\2\2z{\7t\2\2{|\7k\2\2|}\7")
        buf.write("p\2\2}~\7v\2\2~\b\3\2\2\2\177\u0080\7u\2\2\u0080\u0081")
        buf.write("\7e\2\2\u0081\u0082\7c\2\2\u0082\u0083\7p\2\2\u0083\n")
        buf.write("\3\2\2\2\u0084\u0085\7o\2\2\u0085\u0086\7c\2\2\u0086\u0087")
        buf.write("\7k\2\2\u0087\u0088\7p\2\2\u0088\f\3\2\2\2\u0089\u008a")
        buf.write("\7g\2\2\u008a\u008b\7p\2\2\u008b\u008c\7f\2\2\u008c\16")
        buf.write("\3\2\2\2\u008d\u008e\7e\2\2\u008e\u008f\7n\2\2\u008f\u0090")
        buf.write("\7c\2\2\u0090\u0091\7u\2\2\u0091\u0092\7u\2\2\u0092\20")
        buf.write("\3\2\2\2\u0093\u0094\7k\2\2\u0094\u0095\7u\2\2\u0095\22")
        buf.write("\3\2\2\2\u0096\u0097\7k\2\2\u0097\u0098\7h\2\2\u0098\24")
        buf.write("\3\2\2\2\u0099\u009a\7v\2\2\u009a\u009b\7j\2\2\u009b\u009c")
        buf.write("\7g\2\2\u009c\u009d\7p\2\2\u009d\26\3\2\2\2\u009e\u009f")
        buf.write("\7g\2\2\u009f\u00a0\7n\2\2\u00a0\u00a1\7k\2\2\u00a1\u00a2")
        buf.write("\7h\2\2\u00a2\30\3\2\2\2\u00a3\u00a4\7g\2\2\u00a4\u00a5")
        buf.write("\7n\2\2\u00a5\u00a6\7u\2\2\u00a6\u00a7\7g\2\2\u00a7\32")
        buf.write("\3\2\2\2\u00a8\u00a9\7h\2\2\u00a9\u00aa\7q\2\2\u00aa\u00ab")
        buf.write("\7t\2\2\u00ab\34\3\2\2\2\u00ac\u00ad\7i\2\2\u00ad\u00ae")
        buf.write("\7q\2\2\u00ae\36\3\2\2\2\u00af\u00b3\5c\62\2\u00b0\u00b2")
        buf.write("\13\2\2\2\u00b1\u00b0\3\2\2\2\u00b2\u00b5\3\2\2\2\u00b3")
        buf.write("\u00b4\3\2\2\2\u00b3\u00b1\3\2\2\2\u00b4\u00b6\3\2\2\2")
        buf.write("\u00b5\u00b3\3\2\2\2\u00b6\u00b7\5c\62\2\u00b7 \3\2\2")
        buf.write("\2\u00b8\u00b9\7i\2\2\u00b9\u00ba\7n\2\2\u00ba\u00bb\7")
        buf.write("q\2\2\u00bb\u00bc\7d\2\2\u00bc\u00bd\7c\2\2\u00bd\u00c4")
        buf.write("\7n\2\2\u00be\u00bf\7n\2\2\u00bf\u00c0\7q\2\2\u00c0\u00c1")
        buf.write("\7e\2\2\u00c1\u00c2\7c\2\2\u00c2\u00c4\7n\2\2\u00c3\u00b8")
        buf.write("\3\2\2\2\u00c3\u00be\3\2\2\2\u00c4\u00c7\3\2\2\2\u00c5")
        buf.write("\u00c7\5%\23\2\u00c6\u00c3\3\2\2\2\u00c6\u00c5\3\2\2\2")
        buf.write("\u00c7\"\3\2\2\2\u00c8\u00c9\5)\25\2\u00c9\u00ca\5[.\2")
        buf.write("\u00ca\u00cb\5)\25\2\u00cb$\3\2\2\2\u00cc\u00cd\7d\2\2")
        buf.write("\u00cd\u00ce\7q\2\2\u00ce\u00cf\7q\2\2\u00cf\u00e2\7n")
        buf.write("\2\2\u00d0\u00d1\7k\2\2\u00d1\u00d2\7p\2\2\u00d2\u00e2")
        buf.write("\7v\2\2\u00d3\u00d4\7u\2\2\u00d4\u00d5\7v\2\2\u00d5\u00e2")
        buf.write("\7t\2\2\u00d6\u00d7\7c\2\2\u00d7\u00d8\7t\2\2\u00d8\u00d9")
        buf.write("\7t\2\2\u00d9\u00da\7c\2\2\u00da\u00e2\7{\2\2\u00db\u00dc")
        buf.write("\7u\2\2\u00dc\u00dd\7v\2\2\u00dd\u00de\7t\2\2\u00de\u00df")
        buf.write("\7w\2\2\u00df\u00e0\7e\2\2\u00e0\u00e2\7v\2\2\u00e1\u00cc")
        buf.write("\3\2\2\2\u00e1\u00d0\3\2\2\2\u00e1\u00d3\3\2\2\2\u00e1")
        buf.write("\u00d6\3\2\2\2\u00e1\u00db\3\2\2\2\u00e2&\3\2\2\2\u00e3")
        buf.write("\u00e5\5)\25\2\u00e4\u00e3\3\2\2\2\u00e4\u00e5\3\2\2\2")
        buf.write("\u00e5\u00e6\3\2\2\2\u00e6\u00e7\5Y-\2\u00e7\u00e8\5)")
        buf.write("\25\2\u00e8(\3\2\2\2\u00e9\u00eb\t\2\2\2\u00ea\u00e9\3")
        buf.write("\2\2\2\u00eb\u00ec\3\2\2\2\u00ec\u00ea\3\2\2\2\u00ec\u00ed")
        buf.write("\3\2\2\2\u00ed*\3\2\2\2\u00ee\u00f0\t\3\2\2\u00ef\u00ee")
        buf.write("\3\2\2\2\u00f0\u00f1\3\2\2\2\u00f1\u00ef\3\2\2\2\u00f1")
        buf.write("\u00f2\3\2\2\2\u00f2,\3\2\2\2\u00f3\u00f4\7v\2\2\u00f4")
        buf.write("\u00f5\7t\2\2\u00f5\u00f6\7w\2\2\u00f6\u00fd\7g\2\2\u00f7")
        buf.write("\u00f8\7h\2\2\u00f8\u00f9\7c\2\2\u00f9\u00fa\7n\2\2\u00fa")
        buf.write("\u00fb\7u\2\2\u00fb\u00fd\7g\2\2\u00fc\u00f3\3\2\2\2\u00fc")
        buf.write("\u00f7\3\2\2\2\u00fd.\3\2\2\2\u00fe\u00ff\7-\2\2\u00ff")
        buf.write("\60\3\2\2\2\u0100\u0101\7/\2\2\u0101\62\3\2\2\2\u0102")
        buf.write("\u0103\7,\2\2\u0103\64\3\2\2\2\u0104\u0105\7\61\2\2\u0105")
        buf.write("\66\3\2\2\2\u0106\u0107\7`\2\2\u01078\3\2\2\2\u0108\u0109")
        buf.write("\7*\2\2\u0109:\3\2\2\2\u010a\u010b\7+\2\2\u010b<\3\2\2")
        buf.write("\2\u010c\u010d\7]\2\2\u010d>\3\2\2\2\u010e\u010f\7_\2")
        buf.write("\2\u010f@\3\2\2\2\u0110\u0111\7}\2\2\u0111B\3\2\2\2\u0112")
        buf.write("\u0113\7\177\2\2\u0113D\3\2\2\2\u0114\u0115\7?\2\2\u0115")
        buf.write("\u0116\7?\2\2\u0116F\3\2\2\2\u0117\u0118\7#\2\2\u0118")
        buf.write("\u011c\7?\2\2\u0119\u011a\7?\2\2\u011a\u011c\7#\2\2\u011b")
        buf.write("\u0117\3\2\2\2\u011b\u0119\3\2\2\2\u011cH\3\2\2\2\u011d")
        buf.write("\u011e\7@\2\2\u011eJ\3\2\2\2\u011f\u0120\7@\2\2\u0120")
        buf.write("\u0124\7?\2\2\u0121\u0122\7?\2\2\u0122\u0124\7@\2\2\u0123")
        buf.write("\u011f\3\2\2\2\u0123\u0121\3\2\2\2\u0124L\3\2\2\2\u0125")
        buf.write("\u0126\7>\2\2\u0126N\3\2\2\2\u0127\u0128\7>\2\2\u0128")
        buf.write("\u012c\7?\2\2\u0129\u012a\7?\2\2\u012a\u012c\7>\2\2\u012b")
        buf.write("\u0127\3\2\2\2\u012b\u0129\3\2\2\2\u012cP\3\2\2\2\u012d")
        buf.write("\u012e\7(\2\2\u012e\u012f\7(\2\2\u012fR\3\2\2\2\u0130")
        buf.write("\u0131\7~\2\2\u0131\u0132\7~\2\2\u0132T\3\2\2\2\u0133")
        buf.write("\u0134\7#\2\2\u0134V\3\2\2\2\u0135\u0136\7?\2\2\u0136")
        buf.write("X\3\2\2\2\u0137\u0138\7\60\2\2\u0138Z\3\2\2\2\u0139\u013a")
        buf.write("\7<\2\2\u013a\\\3\2\2\2\u013b\u013c\7.\2\2\u013c^\3\2")
        buf.write("\2\2\u013d\u013e\7=\2\2\u013e`\3\2\2\2\u013f\u0140\7t")
        buf.write("\2\2\u0140\u0141\7g\2\2\u0141\u0142\7v\2\2\u0142\u0143")
        buf.write("\7w\2\2\u0143\u0144\7t\2\2\u0144\u0145\7p\2\2\u0145b\3")
        buf.write("\2\2\2\u0146\u0147\7)\2\2\u0147d\3\2\2\2\u0148\u0149\7")
        buf.write("\61\2\2\u0149\u014a\7,\2\2\u014a\u014e\3\2\2\2\u014b\u014d")
        buf.write("\13\2\2\2\u014c\u014b\3\2\2\2\u014d\u0150\3\2\2\2\u014e")
        buf.write("\u014f\3\2\2\2\u014e\u014c\3\2\2\2\u014f\u0151\3\2\2\2")
        buf.write("\u0150\u014e\3\2\2\2\u0151\u0152\7,\2\2\u0152\u0153\7")
        buf.write("\61\2\2\u0153\u0154\3\2\2\2\u0154\u0155\b\63\2\2\u0155")
        buf.write("f\3\2\2\2\u0156\u0157\7\61\2\2\u0157\u0158\7\61\2\2\u0158")
        buf.write("\u015c\3\2\2\2\u0159\u015b\n\4\2\2\u015a\u0159\3\2\2\2")
        buf.write("\u015b\u015e\3\2\2\2\u015c\u015a\3\2\2\2\u015c\u015d\3")
        buf.write("\2\2\2\u015d\u015f\3\2\2\2\u015e\u015c\3\2\2\2\u015f\u0160")
        buf.write("\b\64\2\2\u0160h\3\2\2\2\u0161\u0163\t\5\2\2\u0162\u0161")
        buf.write("\3\2\2\2\u0163\u0164\3\2\2\2\u0164\u0162\3\2\2\2\u0164")
        buf.write("\u0165\3\2\2\2\u0165\u0166\3\2\2\2\u0166\u0167\b\65\2")
        buf.write("\2\u0167j\3\2\2\2\21\2\u00b3\u00c3\u00c6\u00e1\u00e4\u00ec")
        buf.write("\u00f1\u00fc\u011b\u0123\u012b\u014e\u015c\u0164\3\b\2")
        buf.write("\2")
        return buf.getvalue()


class LanguageLexer(Lexer):

    atn = ATNDeserializer().deserialize(serializedATN())

    decisionsToDFA = [ DFA(ds, i) for i, ds in enumerate(atn.decisionToState) ]

    T__0 = 1
    T__1 = 2
    T__2 = 3
    T__3 = 4
    T__4 = 5
    T__5 = 6
    T__6 = 7
    T__7 = 8
    T__8 = 9
    T__9 = 10
    T__10 = 11
    T__11 = 12
    T__12 = 13
    T__13 = 14
    N_STRING = 15
    EXPLCT = 16
    INT_seqc = 17
    TYP = 18
    DECIMAL = 19
    INT = 20
    ID = 21
    BOOL = 22
    PLS = 23
    MNS = 24
    MUL = 25
    DIV = 26
    EXP = 27
    LRB = 28
    RRB = 29
    LSB = 30
    RSB = 31
    LCB = 32
    RCB = 33
    EQ = 34
    NEQ = 35
    GT = 36
    GTE = 37
    LS = 38
    LSE = 39
    AND = 40
    OR = 41
    NOT = 42
    ASN = 43
    DOT = 44
    COL = 45
    COM = 46
    SEM = 47
    RET = 48
    APO = 49
    COMMENT = 50
    LINE_COMMENT = 51
    WS = 52

    channelNames = [ u"DEFAULT_TOKEN_CHANNEL", u"HIDDEN" ]

    modeNames = [ "DEFAULT_MODE" ]

    literalNames = [ "<INVALID>",
            "'function'", "'init'", "'print'", "'scan'", "'main'", "'end'", 
            "'class'", "'is'", "'if'", "'then'", "'elif'", "'else'", "'for'", 
            "'go'", "'+'", "'-'", "'*'", "'/'", "'^'", "'('", "')'", "'['", 
            "']'", "'{'", "'}'", "'=='", "'>'", "'<'", "'&&'", "'||'", "'!'", 
            "'='", "'.'", "':'", "','", "';'", "'return'", "'''" ]

    symbolicNames = [ "<INVALID>",
            "N_STRING", "EXPLCT", "INT_seqc", "TYP", "DECIMAL", "INT", "ID", 
            "BOOL", "PLS", "MNS", "MUL", "DIV", "EXP", "LRB", "RRB", "LSB", 
            "RSB", "LCB", "RCB", "EQ", "NEQ", "GT", "GTE", "LS", "LSE", 
            "AND", "OR", "NOT", "ASN", "DOT", "COL", "COM", "SEM", "RET", 
            "APO", "COMMENT", "LINE_COMMENT", "WS" ]

    ruleNames = [ "T__0", "T__1", "T__2", "T__3", "T__4", "T__5", "T__6", 
                  "T__7", "T__8", "T__9", "T__10", "T__11", "T__12", "T__13", 
                  "N_STRING", "EXPLCT", "INT_seqc", "TYP", "DECIMAL", "INT", 
                  "ID", "BOOL", "PLS", "MNS", "MUL", "DIV", "EXP", "LRB", 
                  "RRB", "LSB", "RSB", "LCB", "RCB", "EQ", "NEQ", "GT", 
                  "GTE", "LS", "LSE", "AND", "OR", "NOT", "ASN", "DOT", 
                  "COL", "COM", "SEM", "RET", "APO", "COMMENT", "LINE_COMMENT", 
                  "WS" ]

    grammarFileName = "Language.g4"

    def __init__(self, input=None, output:TextIO = sys.stdout):
        super().__init__(input, output)
        self.checkVersion("4.9.3")
        self._interp = LexerATNSimulator(self, self.atn, self.decisionsToDFA, PredictionContextCache())
        self._actions = None
        self._predicates = None


