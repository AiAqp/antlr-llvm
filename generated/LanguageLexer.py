# Generated from Language.g4 by ANTLR 4.9.3
from antlr4 import *
from io import StringIO
import sys
if sys.version_info[1] > 5:
    from typing import TextIO
else:
    from typing.io import TextIO



def serializedATN():
    with StringIO() as buf:
        buf.write("\3\u608b\ua72a\u8133\ub9ed\u417c\u3be7\u7786\u5964\2\66")
        buf.write("\u016d\b\1\4\2\t\2\4\3\t\3\4\4\t\4\4\5\t\5\4\6\t\6\4\7")
        buf.write("\t\7\4\b\t\b\4\t\t\t\4\n\t\n\4\13\t\13\4\f\t\f\4\r\t\r")
        buf.write("\4\16\t\16\4\17\t\17\4\20\t\20\4\21\t\21\4\22\t\22\4\23")
        buf.write("\t\23\4\24\t\24\4\25\t\25\4\26\t\26\4\27\t\27\4\30\t\30")
        buf.write("\4\31\t\31\4\32\t\32\4\33\t\33\4\34\t\34\4\35\t\35\4\36")
        buf.write("\t\36\4\37\t\37\4 \t \4!\t!\4\"\t\"\4#\t#\4$\t$\4%\t%")
        buf.write("\4&\t&\4\'\t\'\4(\t(\4)\t)\4*\t*\4+\t+\4,\t,\4-\t-\4.")
        buf.write("\t.\4/\t/\4\60\t\60\4\61\t\61\4\62\t\62\4\63\t\63\4\64")
        buf.write("\t\64\4\65\t\65\3\2\3\2\3\2\3\2\3\2\3\2\3\2\3\3\3\3\3")
        buf.write("\3\3\3\3\3\3\3\3\3\3\3\3\3\3\4\3\4\3\4\3\4\3\4\3\5\3\5")
        buf.write("\3\5\3\5\3\5\3\5\3\6\3\6\3\6\3\6\3\6\3\7\3\7\3\7\3\7\3")
        buf.write("\7\3\b\3\b\3\b\3\b\3\t\3\t\3\t\3\t\3\t\3\t\3\n\3\n\3\n")
        buf.write("\3\13\3\13\3\13\3\f\3\f\3\f\3\f\3\f\3\f\3\r\3\r\3\r\3")
        buf.write("\r\3\r\3\16\3\16\3\16\3\16\3\16\3\17\3\17\3\17\3\17\3")
        buf.write("\17\3\20\3\20\3\20\3\20\3\21\3\21\3\21\3\22\3\22\7\22")
        buf.write("\u00bf\n\22\f\22\16\22\u00c2\13\22\3\22\3\22\3\23\3\23")
        buf.write("\3\23\3\23\3\23\3\23\3\23\3\23\3\23\3\23\3\23\5\23\u00d1")
        buf.write("\n\23\3\24\3\24\3\24\3\24\3\24\3\24\3\24\3\24\3\24\3\24")
        buf.write("\3\24\3\24\3\24\3\24\3\24\3\24\3\24\3\24\3\24\3\24\3\24")
        buf.write("\3\24\3\24\3\24\3\24\3\24\3\24\5\24\u00ee\n\24\3\25\3")
        buf.write("\25\3\25\3\25\3\25\3\25\3\25\3\25\3\25\5\25\u00f9\n\25")
        buf.write("\3\26\5\26\u00fc\n\26\3\26\3\26\3\26\3\27\6\27\u0102\n")
        buf.write("\27\r\27\16\27\u0103\3\30\3\30\3\31\3\31\3\32\3\32\3\33")
        buf.write("\3\33\3\34\3\34\3\35\3\35\3\36\3\36\3\37\3\37\3 \3 \3")
        buf.write("!\3!\3\"\3\"\3#\3#\3#\3$\3$\3$\3$\5$\u0123\n$\3%\3%\3")
        buf.write("&\3&\3&\3&\5&\u012b\n&\3\'\3\'\3(\3(\3(\3(\5(\u0133\n")
        buf.write("(\3)\3)\3)\3*\3*\3*\3+\3+\3,\3,\3-\3-\3.\3.\3/\3/\3\60")
        buf.write("\3\60\3\61\3\61\3\62\6\62\u014a\n\62\r\62\16\62\u014b")
        buf.write("\3\63\3\63\3\63\3\63\7\63\u0152\n\63\f\63\16\63\u0155")
        buf.write("\13\63\3\63\3\63\3\63\3\63\3\63\3\64\3\64\3\64\3\64\7")
        buf.write("\64\u0160\n\64\f\64\16\64\u0163\13\64\3\64\3\64\3\65\6")
        buf.write("\65\u0168\n\65\r\65\16\65\u0169\3\65\3\65\4\u00c0\u0153")
        buf.write("\2\66\3\3\5\4\7\5\t\6\13\7\r\b\17\t\21\n\23\13\25\f\27")
        buf.write("\r\31\16\33\17\35\20\37\21!\22#\23%\24\'\25)\26+\27-\30")
        buf.write("/\31\61\32\63\33\65\34\67\359\36;\37= ?!A\"C#E$G%I&K\'")
        buf.write("M(O)Q*S+U,W-Y.[/]\60_\61a\62c\63e\64g\65i\66\3\2\6\3\2")
        buf.write("\62;\6\2\62;C\\aac|\4\2\f\f\17\17\5\2\13\f\17\17\"\"\2")
        buf.write("\u017d\2\3\3\2\2\2\2\5\3\2\2\2\2\7\3\2\2\2\2\t\3\2\2\2")
        buf.write("\2\13\3\2\2\2\2\r\3\2\2\2\2\17\3\2\2\2\2\21\3\2\2\2\2")
        buf.write("\23\3\2\2\2\2\25\3\2\2\2\2\27\3\2\2\2\2\31\3\2\2\2\2\33")
        buf.write("\3\2\2\2\2\35\3\2\2\2\2\37\3\2\2\2\2!\3\2\2\2\2#\3\2\2")
        buf.write("\2\2%\3\2\2\2\2\'\3\2\2\2\2)\3\2\2\2\2+\3\2\2\2\2-\3\2")
        buf.write("\2\2\2/\3\2\2\2\2\61\3\2\2\2\2\63\3\2\2\2\2\65\3\2\2\2")
        buf.write("\2\67\3\2\2\2\29\3\2\2\2\2;\3\2\2\2\2=\3\2\2\2\2?\3\2")
        buf.write("\2\2\2A\3\2\2\2\2C\3\2\2\2\2E\3\2\2\2\2G\3\2\2\2\2I\3")
        buf.write("\2\2\2\2K\3\2\2\2\2M\3\2\2\2\2O\3\2\2\2\2Q\3\2\2\2\2S")
        buf.write("\3\2\2\2\2U\3\2\2\2\2W\3\2\2\2\2Y\3\2\2\2\2[\3\2\2\2\2")
        buf.write("]\3\2\2\2\2_\3\2\2\2\2a\3\2\2\2\2c\3\2\2\2\2e\3\2\2\2")
        buf.write("\2g\3\2\2\2\2i\3\2\2\2\3k\3\2\2\2\5r\3\2\2\2\7{\3\2\2")
        buf.write("\2\t\u0080\3\2\2\2\13\u0086\3\2\2\2\r\u008b\3\2\2\2\17")
        buf.write("\u0090\3\2\2\2\21\u0094\3\2\2\2\23\u009a\3\2\2\2\25\u009d")
        buf.write("\3\2\2\2\27\u00a0\3\2\2\2\31\u00a6\3\2\2\2\33\u00ab\3")
        buf.write("\2\2\2\35\u00b0\3\2\2\2\37\u00b5\3\2\2\2!\u00b9\3\2\2")
        buf.write("\2#\u00bc\3\2\2\2%\u00d0\3\2\2\2\'\u00ed\3\2\2\2)\u00f8")
        buf.write("\3\2\2\2+\u00fb\3\2\2\2-\u0101\3\2\2\2/\u0105\3\2\2\2")
        buf.write("\61\u0107\3\2\2\2\63\u0109\3\2\2\2\65\u010b\3\2\2\2\67")
        buf.write("\u010d\3\2\2\29\u010f\3\2\2\2;\u0111\3\2\2\2=\u0113\3")
        buf.write("\2\2\2?\u0115\3\2\2\2A\u0117\3\2\2\2C\u0119\3\2\2\2E\u011b")
        buf.write("\3\2\2\2G\u0122\3\2\2\2I\u0124\3\2\2\2K\u012a\3\2\2\2")
        buf.write("M\u012c\3\2\2\2O\u0132\3\2\2\2Q\u0134\3\2\2\2S\u0137\3")
        buf.write("\2\2\2U\u013a\3\2\2\2W\u013c\3\2\2\2Y\u013e\3\2\2\2[\u0140")
        buf.write("\3\2\2\2]\u0142\3\2\2\2_\u0144\3\2\2\2a\u0146\3\2\2\2")
        buf.write("c\u0149\3\2\2\2e\u014d\3\2\2\2g\u015b\3\2\2\2i\u0167\3")
        buf.write("\2\2\2kl\7t\2\2lm\7g\2\2mn\7v\2\2no\7w\2\2op\7t\2\2pq")
        buf.write("\7p\2\2q\4\3\2\2\2rs\7h\2\2st\7w\2\2tu\7p\2\2uv\7e\2\2")
        buf.write("vw\7v\2\2wx\7k\2\2xy\7q\2\2yz\7p\2\2z\6\3\2\2\2{|\7k\2")
        buf.write("\2|}\7p\2\2}~\7k\2\2~\177\7v\2\2\177\b\3\2\2\2\u0080\u0081")
        buf.write("\7r\2\2\u0081\u0082\7t\2\2\u0082\u0083\7k\2\2\u0083\u0084")
        buf.write("\7p\2\2\u0084\u0085\7v\2\2\u0085\n\3\2\2\2\u0086\u0087")
        buf.write("\7u\2\2\u0087\u0088\7e\2\2\u0088\u0089\7c\2\2\u0089\u008a")
        buf.write("\7p\2\2\u008a\f\3\2\2\2\u008b\u008c\7o\2\2\u008c\u008d")
        buf.write("\7c\2\2\u008d\u008e\7k\2\2\u008e\u008f\7p\2\2\u008f\16")
        buf.write("\3\2\2\2\u0090\u0091\7g\2\2\u0091\u0092\7p\2\2\u0092\u0093")
        buf.write("\7f\2\2\u0093\20\3\2\2\2\u0094\u0095\7e\2\2\u0095\u0096")
        buf.write("\7n\2\2\u0096\u0097\7c\2\2\u0097\u0098\7u\2\2\u0098\u0099")
        buf.write("\7u\2\2\u0099\22\3\2\2\2\u009a\u009b\7k\2\2\u009b\u009c")
        buf.write("\7u\2\2\u009c\24\3\2\2\2\u009d\u009e\7k\2\2\u009e\u009f")
        buf.write("\7h\2\2\u009f\26\3\2\2\2\u00a0\u00a1\7\"\2\2\u00a1\u00a2")
        buf.write("\7v\2\2\u00a2\u00a3\7j\2\2\u00a3\u00a4\7g\2\2\u00a4\u00a5")
        buf.write("\7p\2\2\u00a5\30\3\2\2\2\u00a6\u00a7\7g\2\2\u00a7\u00a8")
        buf.write("\7n\2\2\u00a8\u00a9\7k\2\2\u00a9\u00aa\7h\2\2\u00aa\32")
        buf.write("\3\2\2\2\u00ab\u00ac\7v\2\2\u00ac\u00ad\7j\2\2\u00ad\u00ae")
        buf.write("\7g\2\2\u00ae\u00af\7p\2\2\u00af\34\3\2\2\2\u00b0\u00b1")
        buf.write("\7g\2\2\u00b1\u00b2\7n\2\2\u00b2\u00b3\7u\2\2\u00b3\u00b4")
        buf.write("\7g\2\2\u00b4\36\3\2\2\2\u00b5\u00b6\7h\2\2\u00b6\u00b7")
        buf.write("\7q\2\2\u00b7\u00b8\7t\2\2\u00b8 \3\2\2\2\u00b9\u00ba")
        buf.write("\7i\2\2\u00ba\u00bb\7q\2\2\u00bb\"\3\2\2\2\u00bc\u00c0")
        buf.write("\5a\61\2\u00bd\u00bf\13\2\2\2\u00be\u00bd\3\2\2\2\u00bf")
        buf.write("\u00c2\3\2\2\2\u00c0\u00c1\3\2\2\2\u00c0\u00be\3\2\2\2")
        buf.write("\u00c1\u00c3\3\2\2\2\u00c2\u00c0\3\2\2\2\u00c3\u00c4\5")
        buf.write("a\61\2\u00c4$\3\2\2\2\u00c5\u00c6\7i\2\2\u00c6\u00c7\7")
        buf.write("n\2\2\u00c7\u00c8\7q\2\2\u00c8\u00c9\7d\2\2\u00c9\u00ca")
        buf.write("\7c\2\2\u00ca\u00d1\7n\2\2\u00cb\u00cc\7n\2\2\u00cc\u00cd")
        buf.write("\7q\2\2\u00cd\u00ce\7e\2\2\u00ce\u00cf\7c\2\2\u00cf\u00d1")
        buf.write("\7n\2\2\u00d0\u00c5\3\2\2\2\u00d0\u00cb\3\2\2\2\u00d1")
        buf.write("&\3\2\2\2\u00d2\u00d3\7d\2\2\u00d3\u00d4\7q\2\2\u00d4")
        buf.write("\u00d5\7q\2\2\u00d5\u00ee\7n\2\2\u00d6\u00d7\7k\2\2\u00d7")
        buf.write("\u00d8\7p\2\2\u00d8\u00ee\7v\2\2\u00d9\u00da\7u\2\2\u00da")
        buf.write("\u00db\7v\2\2\u00db\u00ee\7t\2\2\u00dc\u00dd\7c\2\2\u00dd")
        buf.write("\u00de\7t\2\2\u00de\u00df\7t\2\2\u00df\u00e0\7c\2\2\u00e0")
        buf.write("\u00ee\7{\2\2\u00e1\u00e2\7u\2\2\u00e2\u00e3\7v\2\2\u00e3")
        buf.write("\u00e4\7t\2\2\u00e4\u00e5\7w\2\2\u00e5\u00e6\7e\2\2\u00e6")
        buf.write("\u00ee\7v\2\2\u00e7\u00e8\7f\2\2\u00e8\u00e9\7q\2\2\u00e9")
        buf.write("\u00ea\7w\2\2\u00ea\u00eb\7d\2\2\u00eb\u00ec\7n\2\2\u00ec")
        buf.write("\u00ee\7g\2\2\u00ed\u00d2\3\2\2\2\u00ed\u00d6\3\2\2\2")
        buf.write("\u00ed\u00d9\3\2\2\2\u00ed\u00dc\3\2\2\2\u00ed\u00e1\3")
        buf.write("\2\2\2\u00ed\u00e7\3\2\2\2\u00ee(\3\2\2\2\u00ef\u00f0")
        buf.write("\7v\2\2\u00f0\u00f1\7t\2\2\u00f1\u00f2\7w\2\2\u00f2\u00f9")
        buf.write("\7g\2\2\u00f3\u00f4\7h\2\2\u00f4\u00f5\7c\2\2\u00f5\u00f6")
        buf.write("\7n\2\2\u00f6\u00f7\7u\2\2\u00f7\u00f9\7g\2\2\u00f8\u00ef")
        buf.write("\3\2\2\2\u00f8\u00f3\3\2\2\2\u00f9*\3\2\2\2\u00fa\u00fc")
        buf.write("\5-\27\2\u00fb\u00fa\3\2\2\2\u00fb\u00fc\3\2\2\2\u00fc")
        buf.write("\u00fd\3\2\2\2\u00fd\u00fe\5Y-\2\u00fe\u00ff\5-\27\2\u00ff")
        buf.write(",\3\2\2\2\u0100\u0102\t\2\2\2\u0101\u0100\3\2\2\2\u0102")
        buf.write("\u0103\3\2\2\2\u0103\u0101\3\2\2\2\u0103\u0104\3\2\2\2")
        buf.write("\u0104.\3\2\2\2\u0105\u0106\7-\2\2\u0106\60\3\2\2\2\u0107")
        buf.write("\u0108\7/\2\2\u0108\62\3\2\2\2\u0109\u010a\7,\2\2\u010a")
        buf.write("\64\3\2\2\2\u010b\u010c\7\61\2\2\u010c\66\3\2\2\2\u010d")
        buf.write("\u010e\7`\2\2\u010e8\3\2\2\2\u010f\u0110\7*\2\2\u0110")
        buf.write(":\3\2\2\2\u0111\u0112\7+\2\2\u0112<\3\2\2\2\u0113\u0114")
        buf.write("\7]\2\2\u0114>\3\2\2\2\u0115\u0116\7_\2\2\u0116@\3\2\2")
        buf.write("\2\u0117\u0118\7}\2\2\u0118B\3\2\2\2\u0119\u011a\7\177")
        buf.write("\2\2\u011aD\3\2\2\2\u011b\u011c\7?\2\2\u011c\u011d\7?")
        buf.write("\2\2\u011dF\3\2\2\2\u011e\u011f\7#\2\2\u011f\u0123\7?")
        buf.write("\2\2\u0120\u0121\7?\2\2\u0121\u0123\7#\2\2\u0122\u011e")
        buf.write("\3\2\2\2\u0122\u0120\3\2\2\2\u0123H\3\2\2\2\u0124\u0125")
        buf.write("\7@\2\2\u0125J\3\2\2\2\u0126\u0127\7@\2\2\u0127\u012b")
        buf.write("\7?\2\2\u0128\u0129\7?\2\2\u0129\u012b\7@\2\2\u012a\u0126")
        buf.write("\3\2\2\2\u012a\u0128\3\2\2\2\u012bL\3\2\2\2\u012c\u012d")
        buf.write("\7>\2\2\u012dN\3\2\2\2\u012e\u012f\7>\2\2\u012f\u0133")
        buf.write("\7?\2\2\u0130\u0131\7?\2\2\u0131\u0133\7>\2\2\u0132\u012e")
        buf.write("\3\2\2\2\u0132\u0130\3\2\2\2\u0133P\3\2\2\2\u0134\u0135")
        buf.write("\7(\2\2\u0135\u0136\7(\2\2\u0136R\3\2\2\2\u0137\u0138")
        buf.write("\7~\2\2\u0138\u0139\7~\2\2\u0139T\3\2\2\2\u013a\u013b")
        buf.write("\7#\2\2\u013bV\3\2\2\2\u013c\u013d\7?\2\2\u013dX\3\2\2")
        buf.write("\2\u013e\u013f\7\60\2\2\u013fZ\3\2\2\2\u0140\u0141\7<")
        buf.write("\2\2\u0141\\\3\2\2\2\u0142\u0143\7.\2\2\u0143^\3\2\2\2")
        buf.write("\u0144\u0145\7=\2\2\u0145`\3\2\2\2\u0146\u0147\7)\2\2")
        buf.write("\u0147b\3\2\2\2\u0148\u014a\t\3\2\2\u0149\u0148\3\2\2")
        buf.write("\2\u014a\u014b\3\2\2\2\u014b\u0149\3\2\2\2\u014b\u014c")
        buf.write("\3\2\2\2\u014cd\3\2\2\2\u014d\u014e\7\61\2\2\u014e\u014f")
        buf.write("\7,\2\2\u014f\u0153\3\2\2\2\u0150\u0152\13\2\2\2\u0151")
        buf.write("\u0150\3\2\2\2\u0152\u0155\3\2\2\2\u0153\u0154\3\2\2\2")
        buf.write("\u0153\u0151\3\2\2\2\u0154\u0156\3\2\2\2\u0155\u0153\3")
        buf.write("\2\2\2\u0156\u0157\7,\2\2\u0157\u0158\7\61\2\2\u0158\u0159")
        buf.write("\3\2\2\2\u0159\u015a\b\63\2\2\u015af\3\2\2\2\u015b\u015c")
        buf.write("\7\61\2\2\u015c\u015d\7\61\2\2\u015d\u0161\3\2\2\2\u015e")
        buf.write("\u0160\n\4\2\2\u015f\u015e\3\2\2\2\u0160\u0163\3\2\2\2")
        buf.write("\u0161\u015f\3\2\2\2\u0161\u0162\3\2\2\2\u0162\u0164\3")
        buf.write("\2\2\2\u0163\u0161\3\2\2\2\u0164\u0165\b\64\2\2\u0165")
        buf.write("h\3\2\2\2\u0166\u0168\t\5\2\2\u0167\u0166\3\2\2\2\u0168")
        buf.write("\u0169\3\2\2\2\u0169\u0167\3\2\2\2\u0169\u016a\3\2\2\2")
        buf.write("\u016a\u016b\3\2\2\2\u016b\u016c\b\65\2\2\u016cj\3\2\2")
        buf.write("\2\20\2\u00c0\u00d0\u00ed\u00f8\u00fb\u0103\u0122\u012a")
        buf.write("\u0132\u014b\u0153\u0161\u0169\3\b\2\2")
        return buf.getvalue()


class LanguageLexer(Lexer):

    atn = ATNDeserializer().deserialize(serializedATN())

    decisionsToDFA = [ DFA(ds, i) for i, ds in enumerate(atn.decisionToState) ]

    T__0 = 1
    T__1 = 2
    T__2 = 3
    T__3 = 4
    T__4 = 5
    T__5 = 6
    T__6 = 7
    T__7 = 8
    T__8 = 9
    T__9 = 10
    T__10 = 11
    T__11 = 12
    T__12 = 13
    T__13 = 14
    T__14 = 15
    T__15 = 16
    N_STRING = 17
    SCOPE = 18
    TYP = 19
    BOOL = 20
    DECIMAL = 21
    INT = 22
    PLS = 23
    MNS = 24
    MUL = 25
    DIV = 26
    EXP = 27
    LRB = 28
    RRB = 29
    LSB = 30
    RSB = 31
    LCB = 32
    RCB = 33
    EQ = 34
    NEQ = 35
    GT = 36
    GTE = 37
    LS = 38
    LSE = 39
    AND = 40
    OR = 41
    NOT = 42
    ASN = 43
    DOT = 44
    COL = 45
    COM = 46
    SEM = 47
    APO = 48
    ID = 49
    COMMENT = 50
    LINE_COMMENT = 51
    WS = 52

    channelNames = [ u"DEFAULT_TOKEN_CHANNEL", u"HIDDEN" ]

    modeNames = [ "DEFAULT_MODE" ]

    literalNames = [ "<INVALID>",
            "'return'", "'function'", "'init'", "'print'", "'scan'", "'main'", 
            "'end'", "'class'", "'is'", "'if'", "' then'", "'elif'", "'then'", 
            "'else'", "'for'", "'go'", "'+'", "'-'", "'*'", "'/'", "'^'", 
            "'('", "')'", "'['", "']'", "'{'", "'}'", "'=='", "'>'", "'<'", 
            "'&&'", "'||'", "'!'", "'='", "'.'", "':'", "','", "';'", "'''" ]

    symbolicNames = [ "<INVALID>",
            "N_STRING", "SCOPE", "TYP", "BOOL", "DECIMAL", "INT", "PLS", 
            "MNS", "MUL", "DIV", "EXP", "LRB", "RRB", "LSB", "RSB", "LCB", 
            "RCB", "EQ", "NEQ", "GT", "GTE", "LS", "LSE", "AND", "OR", "NOT", 
            "ASN", "DOT", "COL", "COM", "SEM", "APO", "ID", "COMMENT", "LINE_COMMENT", 
            "WS" ]

    ruleNames = [ "T__0", "T__1", "T__2", "T__3", "T__4", "T__5", "T__6", 
                  "T__7", "T__8", "T__9", "T__10", "T__11", "T__12", "T__13", 
                  "T__14", "T__15", "N_STRING", "SCOPE", "TYP", "BOOL", 
                  "DECIMAL", "INT", "PLS", "MNS", "MUL", "DIV", "EXP", "LRB", 
                  "RRB", "LSB", "RSB", "LCB", "RCB", "EQ", "NEQ", "GT", 
                  "GTE", "LS", "LSE", "AND", "OR", "NOT", "ASN", "DOT", 
                  "COL", "COM", "SEM", "APO", "ID", "COMMENT", "LINE_COMMENT", 
                  "WS" ]

    grammarFileName = "Language.g4"

    def __init__(self, input=None, output:TextIO = sys.stdout):
        super().__init__(input, output)
        self.checkVersion("4.9.3")
        self._interp = LexerATNSimulator(self, self.atn, self.decisionsToDFA, PredictionContextCache())
        self._actions = None
        self._predicates = None


